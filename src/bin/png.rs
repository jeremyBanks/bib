use std::ops::Range;

use bitvec;
use fiction::fonts;
use fiction::png;
use fiction::zip::crc32_iso;

const WIDTH: usize = 256;

const PALLETTE_8_BIT_DATA: &[(u8, u8, u8); 256] = &[
    (0x00, 0x00, 0x00),
    (0x01, 0x80, 0x20),
    (0x02, 0x80, 0x20),
    (0x03, 0x80, 0x20),
    (0x04, 0x80, 0x20),
    (0x05, 0x80, 0x20),
    (0x06, 0x80, 0x20),
    (0x07, 0x80, 0x20),
    (0x08, 0x80, 0x20),
    (0x09, 0x09, 0x09),
    (0x0A, 0x0A, 0x0A),
    (0x0B, 0x80, 0x20),
    (0x0C, 0x80, 0x20),
    (0x0D, 0x0D, 0x0D),
    (0x0E, 0x80, 0x20),
    (0x0F, 0x80, 0x20),
    (0x10, 0x80, 0x20),
    (0x11, 0x80, 0x20),
    (0x12, 0x80, 0x20),
    (0x13, 0x80, 0x20),
    (0x14, 0x80, 0x20),
    (0x15, 0x80, 0x20),
    (0x16, 0x80, 0x20),
    (0x17, 0x80, 0x20),
    (0x18, 0x80, 0x20),
    (0x19, 0x80, 0x20),
    (0x1A, 0x80, 0x20),
    (0x1B, 0x80, 0x20),
    (0x1C, 0x80, 0x20),
    (0x1D, 0x80, 0x20),
    (0x1E, 0x80, 0x20),
    (0x1F, 0x80, 0x20),
    (0x20, 0x20, 0x20),
    (0x21, 0xFF, 0x80),
    (0x22, 0xFF, 0x80),
    (0x23, 0xFF, 0x80),
    (0x24, 0xFF, 0x80),
    (0x25, 0xFF, 0x80),
    (0x26, 0xFF, 0x80),
    (0x27, 0xFF, 0x80),
    (0x28, 0xFF, 0x80),
    (0x29, 0xFF, 0x80),
    (0x2A, 0xFF, 0x80),
    (0x2B, 0xFF, 0x80),
    (0x2C, 0xFF, 0x80),
    (0x2D, 0xFF, 0x80),
    (0x2E, 0xFF, 0x80),
    (0x2F, 0xFF, 0x80),
    (0x30, 0xFF, 0x80),
    (0x31, 0xFF, 0x80),
    (0x32, 0xFF, 0x80),
    (0x33, 0xFF, 0x80),
    (0x34, 0xFF, 0x80),
    (0x35, 0xFF, 0x80),
    (0x36, 0xFF, 0x80),
    (0x37, 0xFF, 0x80),
    (0x38, 0xFF, 0x80),
    (0x39, 0xFF, 0x80),
    (0x3A, 0xFF, 0x80),
    (0x3B, 0xFF, 0x80),
    (0x3C, 0xFF, 0x80),
    (0x3D, 0xFF, 0x80),
    (0x3E, 0xFF, 0x80),
    (0x3F, 0xFF, 0x80),
    (0x40, 0xFF, 0x80),
    (0x41, 0xFF, 0x80),
    (0x42, 0xFF, 0x80),
    (0x43, 0xFF, 0x80),
    (0x44, 0xFF, 0x80),
    (0x45, 0xFF, 0x80),
    (0x46, 0xFF, 0x80),
    (0x47, 0xFF, 0x80),
    (0x48, 0xFF, 0x80),
    (0x49, 0xFF, 0x80),
    (0x4A, 0xFF, 0x80),
    (0x4B, 0xFF, 0x80),
    (0x4C, 0xFF, 0x80),
    (0x4D, 0xFF, 0x80),
    (0x4E, 0xFF, 0x80),
    (0x4F, 0xFF, 0x80),
    (0x50, 0xFF, 0x80),
    (0x51, 0xFF, 0x80),
    (0x52, 0xFF, 0x80),
    (0x53, 0xFF, 0x80),
    (0x54, 0xFF, 0x80),
    (0x55, 0xFF, 0x80),
    (0x56, 0xFF, 0x80),
    (0x57, 0xFF, 0x80),
    (0x58, 0xFF, 0x80),
    (0x59, 0xFF, 0x80),
    (0x5A, 0xFF, 0x80),
    (0x5B, 0xFF, 0x80),
    (0x5C, 0xFF, 0x80),
    (0x5D, 0xFF, 0x80),
    (0x5E, 0xFF, 0x80),
    (0x5F, 0xFF, 0x80),
    (0x60, 0xFF, 0x80),
    (0x61, 0xFF, 0x80),
    (0x62, 0xFF, 0x80),
    (0x63, 0xFF, 0x80),
    (0x64, 0xFF, 0x80),
    (0x65, 0xFF, 0x80),
    (0x66, 0xFF, 0x80),
    (0x67, 0xFF, 0x80),
    (0x68, 0xFF, 0x80),
    (0x69, 0xFF, 0x80),
    (0x6A, 0xFF, 0x80),
    (0x6B, 0xFF, 0x80),
    (0x6C, 0xFF, 0x80),
    (0x6D, 0xFF, 0x80),
    (0x6E, 0xFF, 0x80),
    (0x6F, 0xFF, 0x80),
    (0x70, 0xFF, 0x80),
    (0x71, 0xFF, 0x80),
    (0x72, 0xFF, 0x80),
    (0x73, 0xFF, 0x80),
    (0x74, 0xFF, 0x80),
    (0x75, 0xFF, 0x80),
    (0x76, 0xFF, 0x80),
    (0x77, 0xFF, 0x80),
    (0x78, 0xFF, 0x80),
    (0x79, 0xFF, 0x80),
    (0x7A, 0xFF, 0x80),
    (0x7B, 0xFF, 0x80),
    (0x7C, 0xFF, 0x80),
    (0x7D, 0xFF, 0x80),
    (0x7E, 0xFF, 0x80),
    (0x7F, 0x80, 0x20),
    (0x80, 0x40, 0x80),
    (0x81, 0x40, 0x80),
    (0x82, 0x40, 0x80),
    (0x83, 0x40, 0x80),
    (0x84, 0x40, 0x80),
    (0x85, 0x40, 0x80),
    (0x86, 0x40, 0x80),
    (0x87, 0x40, 0x80),
    (0x88, 0x40, 0x80),
    (0x89, 0x40, 0x80),
    (0x8A, 0x40, 0x80),
    (0x8B, 0x40, 0x80),
    (0x8C, 0x40, 0x80),
    (0x8D, 0x40, 0x80),
    (0x8E, 0x40, 0x80),
    (0x8F, 0x40, 0x80),
    (0x90, 0x40, 0x80),
    (0x91, 0x40, 0x80),
    (0x92, 0x40, 0x80),
    (0x93, 0x40, 0x80),
    (0x94, 0x40, 0x80),
    (0x95, 0x40, 0x80),
    (0x96, 0x40, 0x80),
    (0x97, 0x40, 0x80),
    (0x98, 0x40, 0x80),
    (0x99, 0x40, 0x80),
    (0x9A, 0x40, 0x80),
    (0x9B, 0x40, 0x80),
    (0x9C, 0x40, 0x80),
    (0x9D, 0x40, 0x80),
    (0x9E, 0x40, 0x80),
    (0x9F, 0x40, 0x80),
    (0xA0, 0x40, 0x80),
    (0xA1, 0x40, 0x80),
    (0xA2, 0x40, 0x80),
    (0xA3, 0x40, 0x80),
    (0xA4, 0x40, 0x80),
    (0xA5, 0x40, 0x80),
    (0xA6, 0x40, 0x80),
    (0xA7, 0x40, 0x80),
    (0xA8, 0x40, 0x80),
    (0xA9, 0x40, 0x80),
    (0xAA, 0x40, 0x80),
    (0xAB, 0x40, 0x80),
    (0xAC, 0x40, 0x80),
    (0xAD, 0x40, 0x80),
    (0xAE, 0x40, 0x80),
    (0xAF, 0x40, 0x80),
    (0xB0, 0x40, 0x80),
    (0xB1, 0x40, 0x80),
    (0xB2, 0x40, 0x80),
    (0xB3, 0x40, 0x80),
    (0xB4, 0x40, 0x80),
    (0xB5, 0x40, 0x80),
    (0xB6, 0x40, 0x80),
    (0xB7, 0x40, 0x80),
    (0xB8, 0x40, 0x80),
    (0xB9, 0x40, 0x80),
    (0xBA, 0x40, 0x80),
    (0xBB, 0x40, 0x80),
    (0xBC, 0x40, 0x80),
    (0xBD, 0x40, 0x80),
    (0xBE, 0x40, 0x80),
    (0xBF, 0x40, 0x80),
    (0xC0, 0x40, 0x80),
    (0xC1, 0x40, 0x80),
    (0xC2, 0x40, 0x80),
    (0xC3, 0x40, 0x80),
    (0xC4, 0x40, 0x80),
    (0xC5, 0x40, 0x80),
    (0xC6, 0x40, 0x80),
    (0xC7, 0x40, 0x80),
    (0xC8, 0x40, 0x80),
    (0xC9, 0x40, 0x80),
    (0xCA, 0x40, 0x80),
    (0xCB, 0x40, 0x80),
    (0xCC, 0x40, 0x80),
    (0xCD, 0x40, 0x80),
    (0xCE, 0x40, 0x80),
    (0xCF, 0x40, 0x80),
    (0xD0, 0x40, 0x80),
    (0xD1, 0x40, 0x80),
    (0xD2, 0x40, 0x80),
    (0xD3, 0x40, 0x80),
    (0xD4, 0x40, 0x80),
    (0xD5, 0x40, 0x80),
    (0xD6, 0x40, 0x80),
    (0xD7, 0x40, 0x80),
    (0xD8, 0x40, 0x80),
    (0xD9, 0x40, 0x80),
    (0xDA, 0x40, 0x80),
    (0xDB, 0x40, 0x80),
    (0xDC, 0x40, 0x80),
    (0xDD, 0x40, 0x80),
    (0xDE, 0x40, 0x80),
    (0xDF, 0x40, 0x80),
    (0xE0, 0x40, 0x80),
    (0xE1, 0x40, 0x80),
    (0xE2, 0x40, 0x80),
    (0xE3, 0x40, 0x80),
    (0xE4, 0x40, 0x80),
    (0xE5, 0x40, 0x80),
    (0xE6, 0x40, 0x80),
    (0xE7, 0x40, 0x80),
    (0xE8, 0x40, 0x80),
    (0xE9, 0x40, 0x80),
    (0xEA, 0x40, 0x80),
    (0xEB, 0x40, 0x80),
    (0xEC, 0x40, 0x80),
    (0xED, 0x40, 0x80),
    (0xEE, 0x40, 0x80),
    (0xEF, 0x40, 0x80),
    (0xF0, 0x40, 0x80),
    (0xF1, 0x40, 0x80),
    (0xF2, 0x40, 0x80),
    (0xF3, 0x40, 0x80),
    (0xF4, 0x40, 0x80),
    (0xF5, 0x40, 0x80),
    (0xF6, 0x40, 0x80),
    (0xF7, 0x40, 0x80),
    (0xF8, 0x40, 0x80),
    (0xF9, 0x40, 0x80),
    (0xFA, 0x40, 0x80),
    (0xFB, 0x40, 0x80),
    (0xFC, 0x40, 0x80),
    (0xFD, 0x40, 0x80),
    (0xFE, 0x40, 0x80),
    (0xFF, 0x40, 0x80),
];

const PALLETTE_8_BIT_GRAYS: &[(u8, u8, u8); 256] = &[
    (0x00, 0x00, 0x00),
    (0x01, 0x01, 0x01),
    (0x02, 0x02, 0x02),
    (0x03, 0x03, 0x03),
    (0x04, 0x04, 0x04),
    (0x05, 0x05, 0x05),
    (0x06, 0x06, 0x06),
    (0x07, 0x07, 0x07),
    (0x08, 0x08, 0x08),
    (0x09, 0x09, 0x09),
    (0x0A, 0x0A, 0x0A),
    (0x0B, 0x0B, 0x0B),
    (0x0C, 0x0C, 0x0C),
    (0x0D, 0x0D, 0x0D),
    (0x0E, 0x0E, 0x0E),
    (0x0F, 0x0F, 0x0F),
    (0x10, 0x10, 0x10),
    (0x11, 0x11, 0x11),
    (0x12, 0x12, 0x12),
    (0x13, 0x13, 0x13),
    (0x14, 0x14, 0x14),
    (0x15, 0x15, 0x15),
    (0x16, 0x16, 0x16),
    (0x17, 0x17, 0x17),
    (0x18, 0x18, 0x18),
    (0x19, 0x19, 0x19),
    (0x1A, 0x1A, 0x1A),
    (0x1B, 0x1B, 0x1B),
    (0x1C, 0x1C, 0x1C),
    (0x1D, 0x1D, 0x1D),
    (0x1E, 0x1E, 0x1E),
    (0x1F, 0x1F, 0x1F),
    (0x20, 0x20, 0x20),
    (0x21, 0x21, 0x21),
    (0x22, 0x22, 0x22),
    (0x23, 0x23, 0x23),
    (0x24, 0x24, 0x24),
    (0x25, 0x25, 0x25),
    (0x26, 0x26, 0x26),
    (0x27, 0x27, 0x27),
    (0x28, 0x28, 0x28),
    (0x29, 0x29, 0x29),
    (0x2A, 0x2A, 0x2A),
    (0x2B, 0x2B, 0x2B),
    (0x2C, 0x2C, 0x2C),
    (0x2D, 0x2D, 0x2D),
    (0x2E, 0x2E, 0x2E),
    (0x2F, 0x2F, 0x2F),
    (0x30, 0x30, 0x30),
    (0x31, 0x31, 0x31),
    (0x32, 0x32, 0x32),
    (0x33, 0x33, 0x33),
    (0x34, 0x34, 0x34),
    (0x35, 0x35, 0x35),
    (0x36, 0x36, 0x36),
    (0x37, 0x37, 0x37),
    (0x38, 0x38, 0x38),
    (0x39, 0x39, 0x39),
    (0x3A, 0x3A, 0x3A),
    (0x3B, 0x3B, 0x3B),
    (0x3C, 0x3C, 0x3C),
    (0x3D, 0x3D, 0x3D),
    (0x3E, 0x3E, 0x3E),
    (0x3F, 0x3F, 0x3F),
    (0x40, 0x40, 0x40),
    (0x41, 0x41, 0x41),
    (0x42, 0x42, 0x42),
    (0x43, 0x43, 0x43),
    (0x44, 0x44, 0x44),
    (0x45, 0x45, 0x45),
    (0x46, 0x46, 0x46),
    (0x47, 0x47, 0x47),
    (0x48, 0x48, 0x48),
    (0x49, 0x49, 0x49),
    (0x4A, 0x4A, 0x4A),
    (0x4B, 0x4B, 0x4B),
    (0x4C, 0x4C, 0x4C),
    (0x4D, 0x4D, 0x4D),
    (0x4E, 0x4E, 0x4E),
    (0x4F, 0x4F, 0x4F),
    (0x50, 0x50, 0x50),
    (0x51, 0x51, 0x51),
    (0x52, 0x52, 0x52),
    (0x53, 0x53, 0x53),
    (0x54, 0x54, 0x54),
    (0x55, 0x55, 0x55),
    (0x56, 0x56, 0x56),
    (0x57, 0x57, 0x57),
    (0x58, 0x58, 0x58),
    (0x59, 0x59, 0x59),
    (0x5A, 0x5A, 0x5A),
    (0x5B, 0x5B, 0x5B),
    (0x5C, 0x5C, 0x5C),
    (0x5D, 0x5D, 0x5D),
    (0x5E, 0x5E, 0x5E),
    (0x5F, 0x5F, 0x5F),
    (0x60, 0x60, 0x60),
    (0x61, 0x61, 0x61),
    (0x62, 0x62, 0x62),
    (0x63, 0x63, 0x63),
    (0x64, 0x64, 0x64),
    (0x65, 0x65, 0x65),
    (0x66, 0x66, 0x66),
    (0x67, 0x67, 0x67),
    (0x68, 0x68, 0x68),
    (0x69, 0x69, 0x69),
    (0x6A, 0x6A, 0x6A),
    (0x6B, 0x6B, 0x6B),
    (0x6C, 0x6C, 0x6C),
    (0x6D, 0x6D, 0x6D),
    (0x6E, 0x6E, 0x6E),
    (0x6F, 0x6F, 0x6F),
    (0x70, 0x70, 0x70),
    (0x71, 0x71, 0x71),
    (0x72, 0x72, 0x72),
    (0x73, 0x73, 0x73),
    (0x74, 0x74, 0x74),
    (0x75, 0x75, 0x75),
    (0x76, 0x76, 0x76),
    (0x77, 0x77, 0x77),
    (0x78, 0x78, 0x78),
    (0x79, 0x79, 0x79),
    (0x7A, 0x7A, 0x7A),
    (0x7B, 0x7B, 0x7B),
    (0x7C, 0x7C, 0x7C),
    (0x7D, 0x7D, 0x7D),
    (0x7E, 0x7E, 0x7E),
    (0x7F, 0x7F, 0x7F),
    (0x80, 0x80, 0x80),
    (0x81, 0x81, 0x81),
    (0x82, 0x82, 0x82),
    (0x83, 0x83, 0x83),
    (0x84, 0x84, 0x84),
    (0x85, 0x85, 0x85),
    (0x86, 0x86, 0x86),
    (0x87, 0x87, 0x87),
    (0x88, 0x88, 0x88),
    (0x89, 0x89, 0x89),
    (0x8A, 0x8A, 0x8A),
    (0x8B, 0x8B, 0x8B),
    (0x8C, 0x8C, 0x8C),
    (0x8D, 0x8D, 0x8D),
    (0x8E, 0x8E, 0x8E),
    (0x8F, 0x8F, 0x8F),
    (0x90, 0x90, 0x90),
    (0x91, 0x91, 0x91),
    (0x92, 0x92, 0x92),
    (0x93, 0x93, 0x93),
    (0x94, 0x94, 0x94),
    (0x95, 0x95, 0x95),
    (0x96, 0x96, 0x96),
    (0x97, 0x97, 0x97),
    (0x98, 0x98, 0x98),
    (0x99, 0x99, 0x99),
    (0x9A, 0x9A, 0x9A),
    (0x9B, 0x9B, 0x9B),
    (0x9C, 0x9C, 0x9C),
    (0x9D, 0x9D, 0x9D),
    (0x9E, 0x9E, 0x9E),
    (0x9F, 0x9F, 0x9F),
    (0xA0, 0xA0, 0xA0),
    (0xA1, 0xA1, 0xA1),
    (0xA2, 0xA2, 0xA2),
    (0xA3, 0xA3, 0xA3),
    (0xA4, 0xA4, 0xA4),
    (0xA5, 0xA5, 0xA5),
    (0xA6, 0xA6, 0xA6),
    (0xA7, 0xA7, 0xA7),
    (0xA8, 0xA8, 0xA8),
    (0xA9, 0xA9, 0xA9),
    (0xAA, 0xAA, 0xAA),
    (0xAB, 0xAB, 0xAB),
    (0xAC, 0xAC, 0xAC),
    (0xAD, 0xAD, 0xAD),
    (0xAE, 0xAE, 0xAE),
    (0xAF, 0xAF, 0xAF),
    (0xB0, 0xB0, 0xB0),
    (0xB1, 0xB1, 0xB1),
    (0xB2, 0xB2, 0xB2),
    (0xB3, 0xB3, 0xB3),
    (0xB4, 0xB4, 0xB4),
    (0xB5, 0xB5, 0xB5),
    (0xB6, 0xB6, 0xB6),
    (0xB7, 0xB7, 0xB7),
    (0xB8, 0xB8, 0xB8),
    (0xB9, 0xB9, 0xB9),
    (0xBA, 0xBA, 0xBA),
    (0xBB, 0xBB, 0xBB),
    (0xBC, 0xBC, 0xBC),
    (0xBD, 0xBD, 0xBD),
    (0xBE, 0xBE, 0xBE),
    (0xBF, 0xBF, 0xBF),
    (0xC0, 0xC0, 0xC0),
    (0xC1, 0xC1, 0xC1),
    (0xC2, 0xC2, 0xC2),
    (0xC3, 0xC3, 0xC3),
    (0xC4, 0xC4, 0xC4),
    (0xC5, 0xC5, 0xC5),
    (0xC6, 0xC6, 0xC6),
    (0xC7, 0xC7, 0xC7),
    (0xC8, 0xC8, 0xC8),
    (0xC9, 0xC9, 0xC9),
    (0xCA, 0xCA, 0xCA),
    (0xCB, 0xCB, 0xCB),
    (0xCC, 0xCC, 0xCC),
    (0xCD, 0xCD, 0xCD),
    (0xCE, 0xCE, 0xCE),
    (0xCF, 0xCF, 0xCF),
    (0xD0, 0xD0, 0xD0),
    (0xD1, 0xD1, 0xD1),
    (0xD2, 0xD2, 0xD2),
    (0xD3, 0xD3, 0xD3),
    (0xD4, 0xD4, 0xD4),
    (0xD5, 0xD5, 0xD5),
    (0xD6, 0xD6, 0xD6),
    (0xD7, 0xD7, 0xD7),
    (0xD8, 0xD8, 0xD8),
    (0xD9, 0xD9, 0xD9),
    (0xDA, 0xDA, 0xDA),
    (0xDB, 0xDB, 0xDB),
    (0xDC, 0xDC, 0xDC),
    (0xDD, 0xDD, 0xDD),
    (0xDE, 0xDE, 0xDE),
    (0xDF, 0xDF, 0xDF),
    (0xE0, 0xE0, 0xE0),
    (0xE1, 0xE1, 0xE1),
    (0xE2, 0xE2, 0xE2),
    (0xE3, 0xE3, 0xE3),
    (0xE4, 0xE4, 0xE4),
    (0xE5, 0xE5, 0xE5),
    (0xE6, 0xE6, 0xE6),
    (0xE7, 0xE7, 0xE7),
    (0xE8, 0xE8, 0xE8),
    (0xE9, 0xE9, 0xE9),
    (0xEA, 0xEA, 0xEA),
    (0xEB, 0xEB, 0xEB),
    (0xEC, 0xEC, 0xEC),
    (0xED, 0xED, 0xED),
    (0xEE, 0xEE, 0xEE),
    (0xEF, 0xEF, 0xEF),
    (0xF0, 0xF0, 0xF0),
    (0xF1, 0xF1, 0xF1),
    (0xF2, 0xF2, 0xF2),
    (0xF3, 0xF3, 0xF3),
    (0xF4, 0xF4, 0xF4),
    (0xF5, 0xF5, 0xF5),
    (0xF6, 0xF6, 0xF6),
    (0xF7, 0xF7, 0xF7),
    (0xF8, 0xF8, 0xF8),
    (0xF9, 0xF9, 0xF9),
    (0xFA, 0xFA, 0xFA),
    (0xFB, 0xFB, 0xFB),
    (0xFC, 0xFC, 0xFC),
    (0xFD, 0xFD, 0xFD),
    (0xFE, 0xFE, 0xFE),
    (0xFF, 0xFF, 0xFF),
];

const PALLETTE_8_BIT_RRRGGBBB: &[(u8, u8, u8)] = &[];

const PALLETTE_1_BIT_GRAYS: &[(u8, u8, u8); 2] = &[(0x00, 0x00, 0x00), (0xFF, 0xFF, 0xFF)];

const PALLETTE_2_BIT_GRAYS: &[(u8, u8, u8); 4] = &[
    (0x00, 0x00, 0x00),
    (0x40, 0x40, 0x40),
    (0x80, 0x80, 0x80),
    (0xFF, 0xFF, 0xFF),
];

const BIT_DENSITY_MAP: &[u8; 256] = &[
    0x00, 0x02, 0x80, 0x40, 0x04, 0x20, 0x10, 0x01, 0x08, 0x82, 0x44, 0x30, 0x09, 0x42, 0x84, 0x21,
    0x18, 0x06, 0xC0, 0x11, 0x28, 0x03, 0x14, 0x60, 0x88, 0x05, 0x12, 0x48, 0xA0, 0x41, 0x0C, 0x22,
    0x90, 0x0A, 0x24, 0x50, 0x81, 0x0E, 0x70, 0x89, 0x26, 0x51, 0x8A, 0x34, 0xC1, 0x2A, 0x54, 0x83,
    0x2C, 0xD0, 0x0B, 0x64, 0x91, 0x4A, 0xA4, 0x13, 0x4C, 0xB0, 0x43, 0x8C, 0x31, 0x46, 0xA8, 0x15,
    0xC2, 0x38, 0x07, 0xC8, 0x32, 0x45, 0x98, 0x23, 0xC4, 0x1A, 0x25, 0x58, 0xA2, 0x0D, 0x52, 0xA1,
    0x1C, 0x62, 0x85, 0x68, 0x92, 0x49, 0x16, 0xE0, 0x19, 0x86, 0x61, 0x94, 0x29, 0x56, 0xA9, 0xD2,
    0x2D, 0xC6, 0x39, 0x96, 0x69, 0xD4, 0x2B, 0x95, 0x6A, 0x9C, 0x63, 0xB4, 0x4B, 0x3C, 0xC3, 0xAC,
    0x53, 0xB8, 0x47, 0xAA, 0x55, 0xE8, 0x17, 0xCA, 0x35, 0xE2, 0x1D, 0xF0, 0x0F, 0xE1, 0x1E, 0xE4,
    0x1B, 0xC5, 0x3A, 0x65, 0x9A, 0xA5, 0x5A, 0x27, 0xD8, 0x87, 0x78, 0xA3, 0x5C, 0xA6, 0x59, 0xB2,
    0x4D, 0x36, 0xC9, 0x33, 0xCC, 0x72, 0x8D, 0x71, 0x8E, 0x74, 0x8B, 0x66, 0x99, 0x6C, 0x93, 0x2E,
    0xD1, 0x4E, 0xB1, 0x6E, 0x9D, 0x73, 0xCE, 0xB5, 0x6B, 0x9E, 0xF1, 0x4F, 0xBC, 0xE3, 0x5E, 0xB9,
    0x67, 0xDC, 0xB3, 0x6D, 0xDA, 0xA7, 0x5D, 0xBA, 0xE5, 0x5B, 0xB6, 0xCD, 0x7A, 0x97, 0xE9, 0x3E,
    0xC7, 0x79, 0xAE, 0xD5, 0x3B, 0xE6, 0xD9, 0x2F, 0xD6, 0x3D, 0xEA, 0x57, 0xAD, 0xF2, 0x1F, 0xEC,
    0xD3, 0x7C, 0xAB, 0x75, 0x8F, 0xF8, 0x37, 0xCB, 0xF4, 0x9B, 0x76, 0xED, 0x9F, 0x7B, 0xF6, 0xAF,
    0xDD, 0xF3, 0x7E, 0xBD, 0xCF, 0x77, 0xFA, 0xB7, 0x7D, 0xEB, 0xDE, 0xF5, 0x3F, 0xDB, 0xEE, 0xF9,
    0xD7, 0x6F, 0xBE, 0x5F, 0xE7, 0xBB, 0xFC, 0xDF, 0x7F, 0xF7, 0xEF, 0xFB, 0xBF, 0xFD, 0xFE, 0xFF,
];

pub const PRIVATE_CHUNK_TYPE: &[u8; 4] = b"pkPK";

pub fn write_png_header(buffer: &mut Vec<u8>) -> Range<usize> {
    let before = buffer.len();

    buffer.extend_from_slice(b"\x89PNG\r\n\x1A\n");
    write_png_chunk(buffer, b"IHDR", b"");

    let after = buffer.len();
    before..after
}

pub fn write_png_footer(buffer: &mut Vec<u8>) -> Range<usize> {
    write_png_chunk(buffer, b"IEND", b"")
}

pub fn write_png_chunk(buffer: &mut Vec<u8>, chunk_type: &[u8; 4], data: &[u8]) -> Range<usize> {
    let before = buffer.len();

    buffer.extend_from_slice(&u32::try_from(data.len()).unwrap().to_be_bytes());
    buffer.extend_from_slice(chunk_type);
    buffer.extend_from_slice(data);
    buffer.extend_from_slice(&crc32_iso(data).to_be_bytes());

    let after = buffer.len();
    before..after
}

fn main() {
    // let mut canvas = [false; 4096];
    // fonts::PrintOptions::default().print("Hello, world!", &mut canvas);

    // for (i, bit) in canvas.into_iter().enumerate() {
    //     if i % 64 == 0 {
    //         println!();
    //     }
    //     print!("{}", if bit { "⬛" } else { "⬜" });
    // }
}
