/// Tiny text rendering.
///
/// Each character fits in a u16, representing a 3x5 grid of pixels.
///
/// The high bit indicates whether the glyph is invisible, in which
/// case the remaining bits are only used for determining spacing.
/// In other cases, the remaining bits are the pixel data.
static GLYPHS: &[(char, u16)] = &[
    (0, 0),
    (' ', 0b__1__000_000_010_000_000),
    ('.', 0___0__000_000_000_010_000),
    (',', 0___0__000_000_000_010_110),
    (';', 0___0__000_010_000_010_110),
    ('‾', 0___0__000_111_000_000_000),
    ('_', 0___0__000_000_111_000_000),
    ('_', 0___0__000_000_000_111_000),
    (':', 0___0__000_010_000_010_000),
    ('0', 0b__0__111_101_101_111_000),
    ('1', 0b__0__010_110_010_111_000),
    ('2', 0b__0__111_001_010_111_000),
    ('3', 0b__0__111_001_001_111_000),
    ('4', 0b__0__101_101_111_001_000),
    ('5', 0b__0__111_100_001_111_000),
    ('6', 0b__0__111_100_101_111_000),
    ('7', 0b__0__111_001_010_010_000),
    ('8', 0b__0__111_101_101_111_000),
    ('9', 0b__0__111_101_111_001_000),
    ('A', 0b__0__111_101_111_101_000),
    ('B', 0b__0__110_111_101_111_000),
    ('C', 0b__0__111_100_100_111_000),
    ('D', 0b__0__110_101_101_110_000),
    ('E', 0b__0__111_110_100_111_000),
    ('F', 0b__0__111_110_100_100_000),
    ('G', 0b__0__111_100_101_111_000),
    ('H', 0b__0__101_111_101_101_000),
    ('I', 0b__0__111_010_010_111_000),
    ('J', 0b__0__111_001_001_110_000),
    ('K', 0b__0__101_110_110_101_000),
    ('L', 0b__0__100_100_100_111_000),
    ('M', 0b__0__101_111_111_101_000),
    ('N', 0b__0__101_111_111_101_000),
    ('O', 0b__0__111_101_101_111_000),
    ('P', 0b__0__111_101_111_100_000),
    ('Q', 0b__0__111_101_111_011_000),
    ('R', 0b__0__111_101_111_101_000),
    ('S', 0b__0__111_100_001_111_000),
    ('T', 0b__0__111_010_010_010_000),
    ('U', 0b__0__101_101_101_111_000),
    ('V', 0b__0__101_101_101_010_000),
    ('W', 0b__0__101_101_111_111_000),
    ('X', 0b__0__101_010_010_101_000),
    ('Y', 0b__0__101_010_010_010_000),
    ('Z', 0b__0__111_001_010_111_000),
    ('a', 0b__0__111_101_111_101_000),
    ('b', 0b__0__110_111_101_111_000),
    ('c', 0b__0__111_100_100_111_000),
    ('d', 0b__0__110_101_101_110_000),
    ('e', 0b__0__111_110_100_111_000),
    ('f', 0b__0__111_110_100_100_000),
    ('g', 0b__0__111_100_101_111_000),
    ('h', 0b__0__101_111_101_101_000),
    ('i', 0b__0__111_010_010_111_000),
    ('j', 0b__0__111_001_001_110_000),
    ('k', 0b__0__101_110_110_101_000),
    ('l', 0b__0__100_100_100_111_000),
    ('m', 0b__0__101_111_111_101_000),
    ('n', 0b__0__101_111_111_101_000),
    ('o', 0b__0__111_101_101_111_000),
    ('p', 0b__0__111_101_111_100_000),
    ('q', 0b__0__111_101_111_011_000),
    ('r', 0b__0__111_101_111_101_000),
    ('s', 0b__0__111_100_001_111_000),
    ('t', 0b__0__111_010_010_010_000),
    ('u', 0b__0__101_101_101_111_000),
    ('v', 0b__0__101_101_101_010_000),
    ('w', 0b__0__101_101_111_111_000),
    ('x', 0b__0__101_010_010_101_000),
    ('y', 0b__0__101_010_010_010_000),
    ('z', 0b__0__111_001_010_111_000),
    ('�', 0b__0__010_111_101_111_010),
];
