use super::*;

static SOME_BYTES: &[u8] = &[
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
    0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
    0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
    0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
    0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
    0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
    0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
    0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00,
];
static SOME_WORDS: &str =
    "\
        alfa bravo charlie delta echo foxtrot golf hotel india juliet kilo lima mike november \
     oscar papa quebec romeo sierra tango uniform victor whiskey xray yankee zulu nada una bisso \
     terra karte panta soxi sette okto nove stop lorem ipsum dolor sit amet consectetur \
     adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua ut enim ad \
     minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo \
     consequat duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu \
     fugiat nulla pariatur excepteur sint occaecat cupidatat non proident sunt in culpa qui \
     officia deserunt mollit anim id est laborum ";
fn samples() -> Vec<(
    &'static [u8],
    &'static str,
    &'static [u8],
    &'static str,
    &'static str,
)> {
    vec![
        (
            &SOME_BYTES[..0],
            "0x00",
            &[0],
            "[0]",
            "Blob { id: 0x00, bytes: …, len(): 0 }",
        ),
        (
            &SOME_BYTES[..1],
            "0x01_01",
            &[1, 1],
            "[1,1]",
            "Blob { id: 0x01_01, bytes: …, len(): 1 }",
        ),
        (
            &SOME_BYTES[..2],
            "0x02_0102",
            &[2, 1, 2],
            "[2,1,2]",
            "Blob { id: 0x02_0102, bytes: …, len(): 2 }",
        ),
        (
            &SOME_BYTES[..16],
            "0x10_01020408102040800103070F1F3F7FFF",
            &[
                16, 1, 2, 4, 8, 16, 32, 64, 128, 1, 3, 7, 15, 31, 63, 127, 255,
            ],
            "[16,1,2,4,8,16,32,64,128,1,3,7,15,31,63,127,255]",
            "Blob { id: 0x10_01020408102040800103070F1F3F7FFF, bytes: …, len(): 16 }",
        ),
        (
            &SOME_BYTES[..27],
            "0x1B_01020408102040800103070F1F3F7FFFFEFCF8F0E0C08000010307",
            &[
                27, 1, 2, 4, 8, 16, 32, 64, 128, 1, 3, 7, 15, 31, 63, 127, 255, 254, 252, 248, 240,
                224, 192, 128, 0, 1, 3, 7,
            ],
            "[27,1,2,4,8,16,32,64,128,1,3,7,15,31,63,127,255,254,252,248,240,224,192,128,0,1,3,7]",
            "Blob { id: 0x1B_01020408102040800103070F1F3F7FFFFEFCF8F0E0C08000010307, bytes: …, \
             len(): 27 }",
        ),
        (
            &SOME_BYTES[..28],
            "0x1C_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F",
            &[
                28, 1, 2, 4, 8, 16, 32, 64, 128, 1, 3, 7, 15, 31, 63, 127, 255, 254, 252, 248, 240,
                224, 192, 128, 0, 1, 3, 7, 15,
            ],
            "[28,1,2,4,8,16,32,64,128,1,3,7,15,31,63,127,255,254,252,248,240,224,192,128,0,1,3,7,\
             15]",
            "Blob { id: 0x1C_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F, bytes: …, \
             len(): 28 }",
        ),
        (
            &SOME_BYTES[..29],
            "0x1D_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F1F",
            &[
                29, 1, 2, 4, 8, 16, 32, 64, 128, 1, 3, 7, 15, 31, 63, 127, 255, 254, 252, 248, 240,
                224, 192, 128, 0, 1, 3, 7, 15, 31,
            ],
            "[29,1,2,4,8,16,32,64,128,1,3,7,15,31,63,127,255,254,252,248,240,224,192,128,0,1,3,7,\
             15,31]",
            "Blob { id: 0x1D_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F1F, bytes: \
             …, len(): 29 }",
        ),
        (
            &SOME_BYTES[..30],
            "0x1E_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F1F3F",
            &[
                30, 1, 2, 4, 8, 16, 32, 64, 128, 1, 3, 7, 15, 31, 63, 127, 255, 254, 252, 248, 240,
                224, 192, 128, 0, 1, 3, 7, 15, 31, 63,
            ],
            "[30,1,2,4,8,16,32,64,128,1,3,7,15,31,63,127,255,254,252,248,240,224,192,128,0,1,3,7,\
             15,31,63]",
            "Blob { id: 0x1E_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F1F3F, bytes: \
             …, len(): 30 }",
        ),
        (
            &SOME_BYTES[..31],
            "0x1F_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F1F3F7F",
            &[
                31, 1, 2, 4, 8, 16, 32, 64, 128, 1, 3, 7, 15, 31, 63, 127, 255, 254, 252, 248, 240,
                224, 192, 128, 0, 1, 3, 7, 15, 31, 63, 127,
            ],
            "[31,1,2,4,8,16,32,64,128,1,3,7,15,31,63,127,255,254,252,248,240,224,192,128,0,1,3,7,\
             15,31,63,127]",
            "Blob { id: 0x1F_01020408102040800103070F1F3F7FFFFEFCF8F0E0C080000103070F1F3F7F, \
             bytes: …, len(): 31 }",
        ),
        (
            &SOME_BYTES[..32],
            "0x20_49659399D7B5F6677FA21F90557C80448E89BFBC169147E0571C3C7A674907",
            &[
                32, 73, 101, 147, 153, 215, 181, 246, 103, 127, 162, 31, 144, 85, 124, 128, 68,
                142, 137, 191, 188, 22, 145, 71, 224, 87, 28, 60, 122, 103, 73, 7,
            ],
            "[32,73,101,147,153,215,181,246,103,127,162,31,144,85,124,128,68,142,137,191,188,22,\
             145,71,224,87,28,60,122,103,73,7]",
            "Blob { id: 0x20_49659399D7B5F6677FA21F90557C80448E89BFBC169147E0571C3C7A674907, \
             bytes: …, len(): 32 }",
        ),
        (
            &SOME_BYTES[..33],
            "0x21_D5549F25DD3D1837A51C437C61156B8B34CFD49EDF1933F5006E27FBB572E6",
            &[
                33, 213, 84, 159, 37, 221, 61, 24, 55, 165, 28, 67, 124, 97, 21, 107, 139, 52, 207,
                212, 158, 223, 25, 51, 245, 0, 110, 39, 251, 181, 114, 230,
            ],
            "[33,213,84,159,37,221,61,24,55,165,28,67,124,97,21,107,139,52,207,212,158,223,25,51,\
             245,0,110,39,251,181,114,230]",
            "Blob { id: 0x21_D5549F25DD3D1837A51C437C61156B8B34CFD49EDF1933F5006E27FBB572E6, \
             bytes: …, len(): 33 }",
        ),
        (
            &SOME_BYTES[..],
            "0x78_BABA5B349C4B20B1582859B0BAB5D209C67FAFBF744D2CEA80EA84076A6BC3",
            &[
                120, 186, 186, 91, 52, 156, 75, 32, 177, 88, 40, 89, 176, 186, 181, 210, 9, 198,
                127, 175, 191, 116, 77, 44, 234, 128, 234, 132, 7, 106, 107, 195,
            ],
            "[120,186,186,91,52,156,75,32,177,88,40,89,176,186,181,210,9,198,127,175,191,116,77,\
             44,234,128,234,132,7,106,107,195]",
            "Blob { id: 0x78_BABA5B349C4B20B1582859B0BAB5D209C67FAFBF744D2CEA80EA84076A6BC3, \
             bytes: …, len(): 120 }",
        ),
        (SOME_WORDS[..0].as_bytes(), "0x00", &[0], "[0]", ""),
        (
            SOME_WORDS[..1].as_bytes(),
            "0x01_61",
            &[1, 97],
            "[1,97]",
            "",
        ),
        (
            SOME_WORDS[..16].as_bytes(),
            "0x10_616C666120627261766F20636861726C",
            &[
                16, 97, 108, 102, 97, 32, 98, 114, 97, 118, 111, 32, 99, 104, 97, 114, 108,
            ],
            "[16,97,108,102,97,32,98,114,97,118,111,32,99,104,97,114,108]",
            "",
        ),
        (
            SOME_WORDS[..27].as_bytes(),
            "0x1B_616C666120627261766F20636861726C69652064656C7461206563",
            &[
                27, 97, 108, 102, 97, 32, 98, 114, 97, 118, 111, 32, 99, 104, 97, 114, 108, 105,
                101, 32, 100, 101, 108, 116, 97, 32, 101, 99,
            ],
            "[27,97,108,102,97,32,98,114,97,118,111,32,99,104,97,114,108,105,101,32,100,101,108,\
             116,97,32,101,99]",
            "",
        ),
        (
            SOME_WORDS[..28].as_bytes(),
            "0x1C_616C666120627261766F20636861726C69652064656C746120656368",
            &[
                28, 97, 108, 102, 97, 32, 98, 114, 97, 118, 111, 32, 99, 104, 97, 114, 108, 105,
                101, 32, 100, 101, 108, 116, 97, 32, 101, 99, 104,
            ],
            "[28,97,108,102,97,32,98,114,97,118,111,32,99,104,97,114,108,105,101,32,100,101,108,\
             116,97,32,101,99,104]",
            "",
        ),
        (
            SOME_WORDS[..29].as_bytes(),
            "0x1D_616C666120627261766F20636861726C69652064656C7461206563686F",
            &[
                29, 97, 108, 102, 97, 32, 98, 114, 97, 118, 111, 32, 99, 104, 97, 114, 108, 105,
                101, 32, 100, 101, 108, 116, 97, 32, 101, 99, 104, 111,
            ],
            "[29,97,108,102,97,32,98,114,97,118,111,32,99,104,97,114,108,105,101,32,100,101,108,\
             116,97,32,101,99,104,111]",
            "",
        ),
        (
            SOME_WORDS[..30].as_bytes(),
            "0x1E_616C666120627261766F20636861726C69652064656C7461206563686F20",
            &[
                30, 97, 108, 102, 97, 32, 98, 114, 97, 118, 111, 32, 99, 104, 97, 114, 108, 105,
                101, 32, 100, 101, 108, 116, 97, 32, 101, 99, 104, 111, 32,
            ],
            "[30,97,108,102,97,32,98,114,97,118,111,32,99,104,97,114,108,105,101,32,100,101,108,\
             116,97,32,101,99,104,111,32]",
            "",
        ),
        (
            SOME_WORDS[..31].as_bytes(),
            "0x1F_616C666120627261766F20636861726C69652064656C7461206563686F2066",
            &[
                31, 97, 108, 102, 97, 32, 98, 114, 97, 118, 111, 32, 99, 104, 97, 114, 108, 105,
                101, 32, 100, 101, 108, 116, 97, 32, 101, 99, 104, 111, 32, 102,
            ],
            "[31,97,108,102,97,32,98,114,97,118,111,32,99,104,97,114,108,105,101,32,100,101,108,\
             116,97,32,101,99,104,111,32,102]",
            "",
        ),
        (
            SOME_WORDS[..32].as_bytes(),
            "0x20_A27844C8191F52E18BEDA28DB8A6D33CB7938949E8115B937EF0AE30527715",
            &[
                32, 162, 120, 68, 200, 25, 31, 82, 225, 139, 237, 162, 141, 184, 166, 211, 60, 183,
                147, 137, 73, 232, 17, 91, 147, 126, 240, 174, 48, 82, 119, 21,
            ],
            "[32,162,120,68,200,25,31,82,225,139,237,162,141,184,166,211,60,183,147,137,73,232,17,\
             91,147,126,240,174,48,82,119,21]",
            "",
        ),
        (
            SOME_WORDS[..33].as_bytes(),
            "0x21_97485EF44E4280EE7C6746A60C0BE09EBD80EA91E95FA1C0CA7304B1372273",
            &[
                33, 151, 72, 94, 244, 78, 66, 128, 238, 124, 103, 70, 166, 12, 11, 224, 158, 189,
                128, 234, 145, 233, 95, 161, 192, 202, 115, 4, 177, 55, 34, 115,
            ],
            "[33,151,72,94,244,78,66,128,238,124,103,70,166,12,11,224,158,189,128,234,145,233,95,\
             161,192,202,115,4,177,55,34,115]",
            "",
        ),
        (
            SOME_WORDS[..].as_bytes(),
            "0x9405_C1C46B79DCBFF80865BF1DEBFE5306C0CD49C01392CAD7458136FBB2A99E",
            &[
                148, 5, 193, 196, 107, 121, 220, 191, 248, 8, 101, 191, 29, 235, 254, 83, 6, 192,
                205, 73, 192, 19, 146, 202, 215, 69, 129, 54, 251, 178, 169, 158,
            ],
            "[660,193,196,107,121,220,191,248,8,101,191,29,235,254,83,6,192,205,73,192,19,146,202,\
             215,69,129,54,251,178,169,158]",
            "",
        ),
    ]
}

#[test]
fn test_blob_id_debug() {
    for (bytes, debug, ..) in samples() {
        let blob_id = BlobId::new(bytes);
        assert_eq!(format!("{blob_id:?}"), debug);
    }
}

#[test]
fn test_blob_id_serialize() {
    for (bytes, _, serialized_bytes, ..) in samples() {
        let blob_id = BlobId::new(bytes);
        let serialized = postcard::to_allocvec(&blob_id).unwrap();
        assert_eq!(serialized_bytes, serialized);
        let deserialized = postcard::from_bytes(&serialized).unwrap();
        assert_eq!(blob_id, deserialized);
    }
}

#[test]
fn test_blob_id_serialize_as_text() {
    for (bytes, _, _, serialized_text, ..) in samples() {
        let blob_id = BlobId::new(bytes);
        let serialized = serde_json::to_string(&blob_id).unwrap();
        assert_eq!(serialized_text, serialized);
        let deserialized: BlobId = serde_json::from_str(&serialized).unwrap();
        assert_eq!(blob_id, deserialized);
    }
}

#[test]
fn test_blob_debug() {
    for (bytes, _, _, _, blob_debug) in samples() {
        let blob = Blob::new(bytes);
        assert_eq!(format!("{blob:?}"), blob_debug);
    }
}
